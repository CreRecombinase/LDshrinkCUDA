// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/LDshrinkCUDA.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// calc_theta
double calc_theta(const double m);
RcppExport SEXP _LDshrinkCUDA_calc_theta(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_theta(m));
    return rcpp_result_gen;
END_RCPP
}
// calcLD_CUDA
Eigen::MatrixXd calcLD_CUDA(const Eigen::MatrixXd& hmata, const Eigen::ArrayXd& map, const double m, const double Ne, const double cutoff);
RcppExport SEXP _LDshrinkCUDA_calcLD_CUDA(SEXP hmataSEXP, SEXP mapSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(calcLD_CUDA(hmata, map, m, Ne, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// calcLD_CUDA_sp
Rcpp::List calcLD_CUDA_sp(const Eigen::MatrixXd& hmata, const Eigen::ArrayXd& map, const double m, const double Ne, const double cutoff);
RcppExport SEXP _LDshrinkCUDA_calcLD_CUDA_sp(SEXP hmataSEXP, SEXP mapSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(calcLD_CUDA_sp(hmata, map, m, Ne, cutoff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LDshrinkCUDA_calc_theta", (DL_FUNC) &_LDshrinkCUDA_calc_theta, 1},
    {"_LDshrinkCUDA_calcLD_CUDA", (DL_FUNC) &_LDshrinkCUDA_calcLD_CUDA, 5},
    {"_LDshrinkCUDA_calcLD_CUDA_sp", (DL_FUNC) &_LDshrinkCUDA_calcLD_CUDA_sp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_LDshrinkCUDA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
